# RGB거리
# https://www.acmicpc.net/problem/1149
# 실버 1 | 시간 제한 0.5초 | 메모리 제한 128MB

'''
RGB거리에는 집이 N개 있다.
거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.

집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다.
각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

- 1번 집의 색은 2번 집의 색과 같지 않아야 한다.
- N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
- i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.
'''

'''
입력 조건
- 첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다.
- 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다.
- 집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.

출력 조건
- 첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.
'''

import sys
input = sys.stdin.readline

n = int(input())
array = [list(map(int, input().split())) for _ in range(n)]

d = [[0] * 3 for _ in range(n)]
d[0][0] = array[0][0] # 첫번째 집에서 빨강을 선택한 경우
d[0][1] = array[0][1] # 첫번째 집에서 초록을 선택한 경우
d[0][2] = array[0][2] # 첫번째 집에서 파랑을 선택한 경우

for i in range(1, n):
    d[i][0] = min(d[i - 1][1], d[i - 1][2]) + array[i][0] # 현재 집에서 빨강을 선택하기로 했을 때, i - 1 집에서 초록과 파랑을 선택했을 경우 중 더 작은 값을 선택
    d[i][1] = min(d[i - 1][0], d[i - 1][2]) + array[i][1] # 현재 집에서 초록을 선택하기로 했을 때
    d[i][2] = min(d[i - 1][0], d[i - 1][1]) + array[i][2] # 현재 집에서 파랑을 선택하기로 했을 때

print(min(d[n - 1])) # 마지막 집이 빨강, 초록, 파랑인 3가지 경우 중 최소값을 선택

# 메모리 30840KB | 시간 68ms | 코드 길이 475B