# 정수 삼각형
# https://www.acmicpc.net/problem/1932
# 실버 1 | 시간 제한 2초 | 메모리 제한 128MB

'''
        7
      3   8
    8   1   0
  2   7   4   4
4   5   2   6   5
위 그림은 크기가 5인 정수 삼각형의 한 모습이다.
맨 위층 7부터 시작해서 아래에 있는 수 중 하나를 선택하여 아래층으로 내려올 때, 이제까지 선택된 수의 합이 최대가 되는 경로를 구하는 프로그램을 작성하라.
아래층에 있는 수는 현재 층에서 선택된 수의 대각선 왼쪽 또는 대각선 오른쪽에 있는 것 중에서만 선택할 수 있다.
삼각형의 크기는 1 이상 500 이하이다.
삼각형을 이루고 있는 각 수는 모두 정수이며, 범위는 0 이상 9999 이하이다.
'''

'''
입력 조건
- 첫째 줄에 삼각형의 크기 n(1 ≤ n ≤ 500)이 주어지고, 둘째 줄부터 n+1번째 줄까지 정수 삼각형이 주어진다.

출력 조건
- 첫째 줄에 합이 최대가 되는 경로에 있는 수의 합을 출력한다.
'''

import sys
input = sys.stdin.readline

n = int(input())
array = [list(map(int, input().split())) for _ in range(n)]

d = [[0] * n for _ in range(n)] # 각 위치에서의 최댓값을 저장할 dp 테이블
d[0][0] = array[0][0]

for i in range(1, n):
    for j in range(i + 1):
        if j == 0: # 각 층의 맨 왼쪽 수면 대각선 오른쪽 위의 수까지의 합과 더해서 저장
            d[i][j] = d[i - 1][j] + array[i][j]
        elif j == i: # 각 층의 맨 오른쪽 수면 대각선 왼쪽 위의 수까지의 합과 더해서 저장
            d[i][j] = d[i - 1][j - 1] + array[i][j]
        else: # 대각선 왼쪽 위의 수까지의 합과 대각선 오른쪽 위의 수까지의 합 중 더 큰 값과 현재 수를 더해서 저장
            d[i][j] = max(d[i - 1][j - 1], d[i - 1][j]) + array[i][j]

print(max(d[n - 1])) # 마지막 층까지의 합 중에서 가장 큰 수 출력

# 메모리 40116KB | 시간 180ms | 코드 길이 466B