# 연속합
# https://www.acmicpc.net/problem/1912
# 실버 2 | 시간 제한 1초 | 메모리 제한 128MB

'''
n개의 정수로 이루어진 임의의 수열이 주어진다.
우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다.
단, 수는 한 개 이상 선택해야 한다.
예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자.
여기서 정답은 12+21인 33이 정답이 된다.
'''

'''
입력 조건
- 첫째 줄에 정수 n(1 ≤ n ≤ 100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다.
- 수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.

출력 조건
- 첫째 줄에 답을 출력한다.
'''

import sys
input = sys.stdin.readline

n = int(input())
array = list(map(int, input().split()))

d = [-1000] * n
d[0] = array[0]

for i in range(1, n):
    if d[i - 1] < 0: # 이전 수 까지 더한 결과가 음수면 현재 수와 더했을 때 최댓값이 나올 수 없으므로, 초기화하고 현재 수만 dp 테이블에 저장
        d[i] = array[i]
    else: # 합이 음수가 될 때 까지 더하고, dp 테이블에 값 저장
        d[i] = d[i - 1] + array[i]
    # d[i] = max(d[i], d[i - 1] + array[i]) 한 줄로 표현 가능

print(max(d))

# 메모리 38548KB | 시간 116ms | 코드 길이 261B