'''
삽입 정렬은 정렬되어 있는 데이터 리스트에서 적절한 위치를 찾은 뒤에, 그 위치에 삽입하는 과정을 N - 1번 반복하는 방법
선택 정렬은 현재 데이터의 상태와 상관없이 무조건 모든 원소를 비교하고 위치를 바꾸는 반면,
삽입 정렬은 필요할 때만 위치를 바꾸므로 '데이터가 거의 정렬되어 있을 때' 훨씬 효율적

첫 번째 데이터는 그 자체로 정렬되어 있다고 판단하기 때문에 두 번째 데이터부터 시작
정렬이 이루어진 원소는 항상 오름차순을 유지하고 있다는 특징 때문에 삽입 정렬에서는 특정한 데이터가 삽입될 위치를 선정할 때(삽입될 위치를 찾기 위하여 왼쪽으로 한 칸씩 이동할 때),
삽입될 데이터보다 작은 데이터를 만나면 그 위치에서 멈추면 됨

1. 첫 번째 데이터는 그 자체로 정렬되어 있다고 판단하고, 두 번째 데이터부터 인덱스를 1씩 감소시키며 비교
2. 자기보다 작은 데이터가 나올 때까지 스와프하며 이동

삽입 정렬의 시간 복잡도 - O(N^2), 최선의 경우 O(N)
'''

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)):
    for j in range(i, 0, -1): # 인덱스 i부터 1까지 감소하며 반복하는 문법
        if array[j] < array[j - 1]: # 한 칸씩 왼쪽으로 이동
            array[j], array[j - 1] = array[j - 1], array[j]
        else: # 자기보다 작은 데이터를 만나면 그 위치에서 멈춤
            break

print(array)