# 플로이드
# 난이도 중하 | 풀이 시간 40분 | 시간 제한 1초 | 메모리 제한 256MB

'''
n(1 <= n <= 100)개의 도시가 있고, 한 도시에서 출발하여 다른 도시에 도착하는 m(1 <= m <= 100,000)개의 버스가 있습니다.
각 버스는 한 번 사용할 때 필요한 비용이 있습니다.
모든 도시의 쌍 (A, B)에 대해서 도시 A에서 B로 가는 데 필요한 비용의 최솟값을 구하는 프로그램을 작성하세요.
'''

'''
입력 조건
- 첫째 줄에 도시의 개수 n(1 <= n <= 100)이 주어집니다.
- 둘째 줄에는 버스의 개수 m(1 <= m <= 100,000)이 주어집니다.
- 셋째 줄부터 m + 2줄까지 다음과 같은 버스의 정보가 주어집니다.
- 먼저 처음에는 그 버스의 출발 도시의 번호가 주어집니다. 버스의 정보는 버스의 시작 도시 a, 도착 도시 b, 한 번 타는 데 필요한 비용 c로 이루어져 있습니다.
- 시작 도시와 도착 도시가 같은 경우는 없습니다. 비용은 100,000보다 작거나 같은 자연수입니다.
- 시작 도시와 도착 도시를 연결하는 노선은 하나가 아닐 수 있습니다.

출력 조건
- n개의 줄을 출력해야 합니다.
- i번째 줄에 출력하는 j번째 숫자는 도시 i에서 j로 가는 데 필요한 최소 비용입니다.
- 만약, i에서 j로 갈 수 없는 경우에는 그 자리에 0을 출력합니다.
'''

'''
시작 도시와 도착 도시를 연결하는 간선이 여러 개일 수 있으므로, 비용이 짧은 간선만 고려
'''


INF = int(1e9)

n = int(input())
m = int(input())
# 2차원 리스트(그래프 표현)을 만들고, 모든 값을 무한으로 초기화
graph = [[INF] * (n + 1) for _ in range(n + 1)]

# 자기 자신에서 자기 자신으로 가는 비용은 0으로 초기화
for a in range(1, n + 1):
    for b in range(1, n + 1):
        if a == b:
            graph[a][b] = 0

# 각 간선에 대한 정보를 입력받아, 그 값으로 초기화
for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a][b] = min(graph[a][b], c)

# 점화식에 따라 플로이드 워셜 알고리즘 수행
for k in range(1, n + 1):
    for a in range(1, n + 1):
        for b in range(1, n + 1):
            graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])

for i in range(1, n + 1):
    for j in range(1, n + 1):
        if graph[i][j] == INF:
            print(0, end=' ')
        else:
            print(graph[i][j], end=' ')
    print()
